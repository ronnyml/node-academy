generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Settings {
  id          Int      @id @default(autoincrement()) @map("settings_id")
  name        String   @unique @map("company_name") @db.VarChar(100)
  email       String   @unique @map("company_email") @db.VarChar(255)
  website     String?  @map("company_website") @db.VarChar(255)
  themeColor      String?  @map("theme_color") @db.VarChar(7)
  logoUrl         String?  @map("logo_url") @db.VarChar(255)
  defaultLanguage String?  @map("default_language") @db.VarChar(10)
  timezone        String?  @map("timezone") @db.VarChar(50)
  featuresEnabled Json?    @map("features_enabled")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @default(now()) @updatedAt @map("updated_at")

  @@map("settings")
}

model Role {
  id          Int      @id @default(autoincrement()) @map("role_id")
  name        String   @unique @map("role_name") @db.VarChar(50)
  description String?  @db.Text
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @default(now()) @updatedAt @map("updated_at")
  users       User[]

  @@map("roles")
}

model User {
  id                Int           @id @default(autoincrement()) @map("user_id")
  email             String        @unique @db.VarChar(100)
  passwordHash      String        @map("password_hash") @db.VarChar(255)
  firstName         String?       @map("first_name") @db.VarChar(50)
  lastName          String?       @map("last_name") @db.VarChar(50)
  roleId            Int?          @map("role_id")
  createdAt         DateTime      @default(now()) @map("created_at")
  updatedAt         DateTime      @default(now()) @updatedAt @map("updated_at")
  role              Role?         @relation(fields: [roleId], references: [id])
  active            Boolean       @default(true) @map("active")
  taughtCourses     Course[]
  enrollments       Enrollment[]
  examResults       ExamResult[]
  reviews           Review[]
  auditLogs         AuditLog[]

  @@index([email])
  @@index([roleId])
  @@map("users")
}

model Category {
  id          Int      @id @default(autoincrement()) @map("category_id")
  name        String   @db.VarChar(100)
  description String?  @db.Text
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @default(now()) @updatedAt @map("updated_at")
  courses     Course[]

  @@map("categories")
}

model Course {
  id             Int             @id @default(autoincrement()) @map("course_id")
  title          String          @db.VarChar(100)
  description    String?         @db.Text
  categoryId     Int?            @map("category_id")
  teacherId      Int?            @map("teacher_id")
  price          Decimal         @default(0.00) @db.Decimal(10, 2)
  publishedAt    DateTime?       @map("published_at")
  createdAt      DateTime        @default(now()) @map("created_at")
  updatedAt      DateTime        @default(now()) @updatedAt @map("updated_at")
  isFeatured     Boolean         @default(false) @map("is_featured")
  category       Category?       @relation(fields: [categoryId], references: [id])
  teacher        User?           @relation(fields: [teacherId], references: [id])
  sections       CourseSection[]
  enrollments    Enrollment[]
  exams          Exam[]
  materials      CourseMaterial[]
  reviews        Review[]

  @@index([teacherId])
  @@index([categoryId])
  @@map("courses")
}

model CourseSection {
  id            Int               @id @default(autoincrement()) @map("section_id")
  courseId      Int               @map("course_id")
  title         String            @db.VarChar(100)
  description   String?           @db.Text
  orderIndex    Int               @map("order_index")
  createdAt     DateTime          @default(now()) @map("created_at")
  updatedAt     DateTime          @default(now()) @updatedAt @map("updated_at")
  course        Course            @relation(fields: [courseId], references: [id])
  progress      ProgressTracking[]

  @@index([courseId])
  @@index([orderIndex])
  @@map("course_sections")
}

model Enrollment {
  id                 Int                @id @default(autoincrement()) @map("enrollment_id")
  studentId          Int                @map("student_id")
  courseId           Int                @map("course_id")
  enrolledAt         DateTime           @default(now()) @map("enrolled_at")
  status             String             @default("active") @db.VarChar(20)
  createdAt          DateTime           @default(now()) @map("created_at")
  updatedAt          DateTime           @default(now()) @updatedAt @map("updated_at")
  student            User               @relation(fields: [studentId], references: [id])
  course             Course             @relation(fields: [courseId], references: [id])
  payments           Payment[]
  certificates       Certificate[]
  progressTracking   ProgressTracking[]
  enrollmentProgress EnrollmentProgress[]

  @@index([studentId])
  @@index([courseId])
  @@map("enrollments")
}

model PaymentMethod {
  id          Int       @id @default(autoincrement()) @map("payment_method_id")
  name        String    @db.VarChar(50)
  description String?   @db.Text
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @default(now()) @updatedAt @map("updated_at")
  payments    Payment[]

  @@map("payment_methods")
}

model PaymentStatus {
  id          Int       @id @default(autoincrement()) @map("payment_status_id")
  status      String    @db.VarChar(50)
  description String?   @db.Text
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @default(now()) @updatedAt @map("updated_at")
  payments    Payment[]

  @@map("payment_statuses")
}

model Payment {
  id              Int           @id @default(autoincrement()) @map("payment_id")
  enrollmentId    Int           @map("enrollment_id")
  amount          Decimal       @db.Decimal(10, 2)
  paymentMethodId Int           @map("payment_method_id")
  paymentStatusId Int           @map("payment_status_id")
  paidAt          DateTime      @default(now()) @map("paid_at")
  createdAt       DateTime      @default(now()) @map("created_at")
  updatedAt       DateTime      @default(now()) @updatedAt @map("updated_at")
  enrollment      Enrollment    @relation(fields: [enrollmentId], references: [id])
  paymentMethod   PaymentMethod @relation(fields: [paymentMethodId], references: [id])
  paymentStatus   PaymentStatus @relation(fields: [paymentStatusId], references: [id])

  @@index([enrollmentId])
  @@map("payments")
}

model Exam {
  id          Int         @id @default(autoincrement()) @map("exam_id")
  courseId    Int         @map("course_id")
  title       String      @db.VarChar(100)
  description String?     @db.Text
  maxScore    Int?        @map("max_score")
  createdAt   DateTime    @default(now()) @map("created_at")
  updatedAt   DateTime    @default(now()) @updatedAt @map("updated_at")
  course      Course      @relation(fields: [courseId], references: [id])
  results     ExamResult[]

  @@map("exams")
}

model ExamResult {
  id        Int      @id @default(autoincrement()) @map("result_id")
  examId    Int      @map("exam_id")
  studentId Int      @map("student_id")
  score     Int?
  takenAt   DateTime @default(now()) @map("taken_at")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")
  exam      Exam     @relation(fields: [examId], references: [id])
  student   User     @relation(fields: [studentId], references: [id])

  @@index([studentId])
  @@index([examId])
  @@map("exam_results")
}

model CourseMaterial {
  id        Int      @id @default(autoincrement()) @map("material_id")
  courseId  Int      @map("course_id")
  title     String   @db.VarChar(100)
  fileUrl   String?  @map("file_url") @db.VarChar(255)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")
  course    Course   @relation(fields: [courseId], references: [id])

  @@map("course_materials")
}

model Review {
  id        Int      @id @default(autoincrement()) @map("review_id")
  courseId  Int      @map("course_id")
  studentId Int      @map("student_id")
  rating    Int
  comment   String?  @db.Text
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")
  course    Course   @relation(fields: [courseId], references: [id])
  student   User     @relation(fields: [studentId], references: [id])

  @@index([courseId])
  @@index([studentId])
  @@map("reviews")
}

model Certificate {
  id            Int        @id @default(autoincrement()) @map("certificate_id")
  enrollmentId  Int        @map("enrollment_id")
  issuedAt      DateTime   @default(now()) @map("issued_at")
  certificateUrl String?   @map("certificate_url") @db.VarChar(255)
  createdAt     DateTime   @default(now()) @map("created_at")
  updatedAt     DateTime   @default(now()) @updatedAt @map("updated_at")
  enrollment    Enrollment @relation(fields: [enrollmentId], references: [id])

  @@map("certificates")
}

model ProgressTracking {
  id          Int           @id @default(autoincrement()) @map("progress_id")
  enrollmentId Int          @map("enrollment_id")
  sectionId   Int           @map("section_id")
  isCompleted Boolean       @default(false) @map("is_completed")
  completedAt DateTime?     @map("completed_at")
  createdAt   DateTime      @default(now()) @map("created_at")
  updatedAt   DateTime      @default(now()) @updatedAt @map("updated_at")
  enrollment  Enrollment    @relation(fields: [enrollmentId], references: [id])
  section     CourseSection @relation(fields: [sectionId], references: [id])

  @@index([enrollmentId])
  @@index([sectionId])
  @@map("progress_tracking")
}

model EnrollmentProgress {
  id            Int        @id @default(autoincrement()) @map("enrollment_progress_id")
  enrollmentId  Int        @map("enrollment_id")
  percentage    Int
  lastUpdatedAt DateTime   @default(now()) @map("last_updated_at")
  enrollment    Enrollment @relation(fields: [enrollmentId], references: [id])

  @@index([enrollmentId])
  @@map("enrollment_progress")
}

model AuditLog {
  id        Int      @id @default(autoincrement()) @map("audit_id")
  tableName String   @map("table_name") @db.VarChar(50)
  recordId  Int      @map("record_id")
  action    String   @db.VarChar(10)
  oldData   Json?    @map("old_data")
  newData   Json?    @map("new_data")
  changedBy Int?     @map("changed_by")
  changedAt DateTime @default(now()) @map("changed_at")
  user      User?    @relation(fields: [changedBy], references: [id])

  @@index([tableName])
  @@index([recordId])
  @@map("audit_logs")
}